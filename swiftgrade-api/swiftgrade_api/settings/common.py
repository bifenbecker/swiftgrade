

"""
Django settings for swiftgrade_api project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import datetime

from celery.schedules import crontab
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_FOLDER = BASE_DIR[:-14]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django_extensions',
    'django_filters',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'drf_yasg',
    'jet.dashboard',
    'jet',
    'swiftgrade_api.apps.CustomAdminConfig',
    # 'django.contrib.admin',
    'rangefilter',
    'rest_framework',
    'rest_framework_simplejwt',
    'swiftgrade_api',
    'users',
    'groups',
    'assessments',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'api.core.middleware.SwaggerAgentMiddleware',
]

ROOT_URLCONF = 'swiftgrade_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ["DB_NAME"],
        'USER': os.environ["DB_USER"],
        'PASSWORD': os.environ["DB_PASSWORD"],
        'HOST': os.environ["DB_HOST"],
    },
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'users.services.auth.authentication_service.JSONWebTokenAuthentication',
    ),
    'EXCEPTION_HANDLER': 'api.core.utils.exception_handler.exception_handler_wrapper',
}

# JWT_AUTH = {
#     'JWT_SECRET_KEY': os.environ.get('JWT_SECRET_KEY'),
#     'JWT_AUTH_HEADER_PREFIX': 'JWT',
#     'JWT_VERIFY_EXPIRATION': True,
#     'JWT_LEEWAY': 0,
#     'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=24),
#     'JWT_ALLOW_REFRESH': True,
# }
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=30),
    'AUTH_HEADER_TYPES': ('JWT', ),
    'AUTH_HEADER_NAME': 'Authorization',
    'TOKEN_TYPE_CLAIM': 'access',
    'ROTATE_REFRESH_TOKENS': True,
}
TIMEOUT_IN_MINUTES_TIME = 30
GOALS_LIMITATION = 99
# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

DEFAULT_FILE_STORAGE = os.environ.get('DEFAULT_FILE_STORAGE', 'django.core.files.storage.FileSystemStorage')

LANGUAGE_CODE = 'en-us'

LANGUAGES = [
    ('en', _('English')),
]

LOCALE_PATHS = [
    "%s/locales/" % BASE_DIR,
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-client',
    'cache-control',
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'static/'

AUTH_USER_MODEL = 'users.User'

# Verification code expiration in hours
VERIFICATION_CODE_EXPIRATION_TIME = 2

SHELL_PLUS = "ipython"

SHELL_PLUS_PRE_IMPORTS = [
    ('api.core.choices', '*'),
    ('users.services', '*'),
    ('datetime', ('datetime', 'timedelta')),
]

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SHOW_EXTENSIONS': False,
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
    'DEFAULT_FIELD_INSPECTORS': [
        'api.core.inspectors.CustomFieldInspector',
        'api.core.inspectors.SerializerInspector',
        'drf_yasg.inspectors.CamelCaseJSONFilter',
        'drf_yasg.inspectors.RecursiveFieldInspector',
        'drf_yasg.inspectors.ChoiceFieldInspector',
        'drf_yasg.inspectors.FileFieldInspector',
        'drf_yasg.inspectors.DictFieldInspector',
        'drf_yasg.inspectors.HiddenFieldInspector',
        'drf_yasg.inspectors.RelatedFieldInspector',
        'drf_yasg.inspectors.SerializerMethodFieldInspector',
        'drf_yasg.inspectors.SimpleFieldInspector',
        'drf_yasg.inspectors.StringDefaultFieldInspector',
    ],
}

APPEND_SLASH = False

LOGIN_URL = 'rest_framework:login'
LOGOUT_URL = 'rest_framework:logout'

CELERY_BROKER_URL = os.environ.get("REDIS_URL", "redis://localhost:6379/1")
CELERY_CACHE_BACKEND = 'default'
CELERY_RESULT_BACKEND = os.environ.get('RESULT_BACKEND', 'redis://localhost:6379/2')
# CELERY_DEFAULT_QUEUE = os.environ.get("CELERY_DEFAULT_QUEUE", "default")
# CELERY_DEFAULT_EXCHANGE = os.environ.get("CELERY_DEFAULT_QUEUE", "default")
# CELERY_DEFAULT_ROUTING_KEY = os.environ.get("CELERY_DEFAULT_QUEUE", "default")
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True
CELERY_ACCEPT_CONTENT = ['application/json', 'pickle']
CELERY_BEAT_SCHEDULE = {
    # 'submit_assessment': {
    #     'task': 'assessments.tasks.delete_unused_assessment_files_task.delete_unused_assessment_files',
    #     'schedule': crontab(hour='*/24'),
    # },
    # 'check_assessments_recognition': {
    #     'task': 'assessments.tasks.check_assessments_recognition_task.check_assessments_recognition',
    #     'schedule': crontab(),
    # },
    'send_no_assessment_for_teacher_result': {
        'task': 'users.tasks.check_no_assessment_result_email_task.process_no_assessment_result_email_task',
        'schedule': crontab(minute=0, hour='*/24'),
    },
    'send_unfinished_registration': {
        'task': 'users.tasks.check_unfinished_registration_task.check_unfinished_registration_task',
        'schedule': crontab(minute='*'),
    }
}


# DYNAMIC_PREFERENCES = {
#
#     # a python attribute that will be added to model instances with preferences
#     # override this if the default collide with one of your models attributes/fields
#     'MANAGER_ATTRIBUTE': 'preferences',
#
#     # The python module in which registered preferences will be searched within each app
#     'REGISTRY_MODULE': 'dynamic_preferences_registry',
#
#     # Allow quick editing of preferences directly in admin list view
#     # WARNING: enabling this feature can cause data corruption if multiple users
#     # use the same list view at the same time, see https://code.djangoproject.com/ticket/11313
#     'ADMIN_ENABLE_CHANGELIST_FORM': True,
#
#     'FILE_PREFERENCE_UPLOAD_DIR': '',
#
#     # Customize how you can access preferences from managers. The default is to
#     # separate sections and keys with two underscores. This is probably not a settings you'll
#     # want to change, but it's here just in case
#     'SECTION_KEY_SEPARATOR': '__',
#
#     # Use this to disable caching of preference. This can be useful to debug things
#     'ENABLE_CACHE': False,
#
#     # Use this to disable checking preferences names. This can be useful to debug things
#     'VALIDATE_NAMES': True,
# }

JET_SIDE_MENU_COMPACT = True
JET_SIDE_MENU_ITEMS = [
    {'app_label': 'assessments', 'permissions': ['user'], 'items': [
        {'name': 'answermark'},
        {'name': 'answersheetscanitem'},
        {'name': 'answersheetscan'},
        {'name': 'answersheetzip'},
        {'name': 'answersheet'},
        {'name': 'answer'},
        {'name': 'assessmentfile'},
        {'name': 'assessmentitem'},
        {'name': 'assessmentresultitemmark'},
        {'name': 'assessmentresultitem'},
        {'name': 'assessmentresult'},
        {'name': 'assessmentsettings'},
        {'name': 'assessment'},
        {'name': 'completedassessment'},
        {'name': 'recognitionbatch'},
        {'name': 'recognizedperson'},
    ]},
    {'app_label': 'auth', 'permissions': ['user'], 'items': [
        {'name': 'group'},
    ]},
    {'app_label': 'groups', 'permissions': ['user'], 'items': [
        {'name': 'group'},
    ]},
    {'app_label': 'users', 'items': [
        {'name': 'student', 'permissions': ['user']},
        {'name': 'user'},
        {'name': 'verificationcode', 'permissions': ['user']},
        {'name': 'loginhistory', 'label': 'Login history',
            'permissions': ['user']},
    ]},
    {'app_label': 'statistics', 'label': 'Statistics','items': [
        {'label': 'User stats',
            'url': '/admin/statistics/users/'},
        {'label': 'Teachers with a new result',
            'url': '/admin/statistics/active_teachers_with_results/'},
        {'label': 'Assessments given',
            'url': '/admin/statistics/total_assessments_given/'},
        {'label': 'Student results',
            'url': '/admin/statistics/total_assessment_resutls/'},
        {'label': 'Answers graded',
            'url': '/admin/statistics/total_number_graded_answers/'},
        {'label': 'Funnel', 'url': '/admin/statistics/teachers_funnel/'},
    ]}
]

ADMIN_DATE_FORMATS = ('%m/%d/%Y', '%Y-%m-%d')
ADMIN_TIMEZONE = 'Etc/GMT+4'
ADMIN_VANCOUVER_TIMEZONE = 'Etc/GMT-7'  # Vancouver summer time GMT-7
ADMIN_VANCOUVER_TIMEZONE_NAME = 'America/Vancouver'

CACHES = {
    'default': {
        "BACKEND": "django_redis.cache.RedisCache",
    },
}
IMAGES_FOLDER_PATH = 'images'
HOST_URL = os.environ.get('HOST_URL')
SWIFTGRADE_CV_URL = os.environ.get('SWIFTGRADE_CV_URL')
SWIFTGRADE_URL = os.environ.get('SWIFTGRADE_URL')

AWS_ACCESS_KEY_ID = os.environ.get('DJANGO_AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('DJANGO_AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('DJANGO_AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.environ.get('DJANGO_AWS_REGION', 'ca-central-1')
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_REGION = os.environ.get('DJANGO_AWS_REGION', 'ca-central-1')
AWS_S3_FILE_OVERWRITE = os.environ.get('DJANGO_AWS_S3_FILE_OVERWRITE', False)
AWS_DEFAULT_ACL = os.environ.get('DJANGO_AWS_DEFAULT_ACL', None)

CUSTOMERS_EMAIL = os.environ.get('CUSTOMERS_EMAIL')
NOTIFICATIONS_SENDER = os.environ.get('NOTIFICATIONS_SENDER')
NO_REPLY_NOTIFICATIONS_SENDER = os.environ.get('NO_REPLY_NOTIFICATIONS_SENDER')

CLIENT_ID = os.environ.get('CLIENT_ID')
CLIENT_SECRET = os.environ.get('CLIENT_SECRET')
IOS_CLIENT_ID = os.environ.get('IOS_CLIENT_ID')
LIBBRE_OFFICE_PATH = os.environ.get('LIBBRE_OFFICE_PATH', 'soffice')

ACCURACY_TIPS_FILE_NAME = os.environ.get('ACCURACY_TIPS_FILE_NAME', 'SwiftGrade_accuracy_tips.pdf')

PASSWORD_MIN_LENGTH = 8

REST_SESSION_LOGIN = False

LOGGER_BACKUP_COUNT = os.environ.get('LOGGER_BACKUP_COUNT', 10)
LOGGER_INTERVAL = os.environ.get('LOGGER_INTERVAL', 2)

APPLE_CLIENT_ID = os.environ.get('APPLE_CLIENT_ID')
APPLE_KEY_ID = os.environ.get('APPLE_KEY_ID')
APPLE_PRIVATE_KEY_PATH = os.environ.get('APPLE_PRIVATE_KEY_PATH')
APPLE_TEAM_ID = os.environ.get('APPLE_TEAM_ID')
APPLE_APP_ID = os.environ.get('APPLE_APP_ID')

BIGMAILER_BRAND_ID = os.environ.get('BIGMAILER_BRAND_ID')
BIGMAILER_SIGN_UP_TEACHERS_LIST_ID = os.environ.get('BIGMAILER_SIGN_UP_TEACHERS_LIST_ID')
BIGMAILER_SIGN_UP_STUDENTS_LIST_ID = os.environ.get('BIGMAILER_SIGN_UP_STUDENTS_LIST_ID')
BIGMAILER_VERIFIED_TEACHERS_LIST_ID = os.environ.get('BIGMAILER_VERIFIED_TEACHERS_LIST_ID')
BIGMAILER_X_API_KEY = os.environ.get('BIGMAILER_X_API_KEY')
BIGMAILER_TEACHERS_CAMPAING_ID = os.environ.get('BIGMAILER_TEACHERS_CAMPAING_ID')
BIGMAILER_STUDENTS_CAMPAING_ID = os.environ.get('BIGMAILER_STUDENTS_CAMPAING_ID')
