Давай попробуешь сам задеплоить сегодня последние изменения

Инструкция, как делать это правильно, выше

Но сегодня нам нужна упрощённая версия

Нужно будет залить измненения для swiftgrade-api и swiftgrade-web. Твои ПР-ы все вмержила, но на всякий случай перепроверь

Последовательность у тебя будет такая:

Переключаешься на dev ветку на апи и вебе, проходишься по всем страницам и смотришь, что всё ок, никакая страница не падает
Создаёшь ПР dev -> testing на апи и вебе, мержишь их
Создаёшь ПР testing -> stage на апи и вебе, мержишь их
Для тебя должны быть уже настроены нотификации от AWS, что деплой начался/закончился. Если в течение получаса после того, как ветка stage обновлена, на почту ничего не пришло, то пиши Igor Efimov, чтобы настроил для тебя нотификации по билдам на swiftgrade
После того, как задеплоилось, идёшь на стейдж и проверяешь снова работоспособность всех страниц, тестишь свои изменения

Привет

*Deployment*

На данный момент у нас есть настройки, которые позволяют задеплоить последние изменения безболезненно в отличие от того, как было раньше.
Последовательность шагов такая:
1. Определяем, какие задачи должны войти в билд
2. Проверяем, что ПР-ы во всех нужных репозиториях (swiftgrade-api, swiftgrade-web, swiftgrade-cv) вмержены в dev (в случае swiftgrade-cv репозитория - develop) ветку
3. Переключаемся на dev (в случае swiftgrade-cv репозитория - develop) ветку и проверяем локально общую работоспособность приложения (что никакие страницы не падают, пройтись по базовым вещам: создать класс/ассессмент/сгенерить бланк и тд и визуально посмотреть, что всё ок). Т.к. каждый разработчик должен к этому моменту уже проверить, что в dev ветке его/её задачи работают корректно, то на этом этапе проблем возникнуть не должно. Если возникли, стопается деплоймент до момента, пока критические проблемы не будут поправлены. Либо если не работает какой-то определённый фикс, то обсуждается с ПМ, включать ли данную задачу в билд. Если не включаем, то переходим к следующему шагу и неработающая задача будет поправлена и залита к следующему билду. Если необходимо некорректно пофикшенную задачу включить, стопаем деплой, и человек, на ком была данная задача, фиксит проблему. И далее возвращаемся к шагу 2.
4. Когда убедились, что локально всё ок, можем приступать к самому деплою.
5. Если были обновлены/добавлены env переменные, сначала обновляем их. Инструкция здесь: https://conf.itexus.com/pages/viewpage.action?pageId=5850432
 При необходимости вопросы на этом шаге можно задать Игорю Ефимову, он поможет
6. Далее нужно вмержить код из dev в testing. То есть просто выбираешь нужные ветки, создаёшь ПР и мержишь его. Когда в testing вмержено, то создаёшь новый ПР уже из testing в ветку нужного сервера. Последнее время мы деплоим только на стейдж, поэтому твой ПР будет testing -> stage. Последовательность в том смысле, что сначала заливать - swiftgrade-api, swiftgrade-cv или swiftgrade-web - не важна. Единственная рекомендация: не стоит одновременно мержить ПР-ы в stage ветку для бэка swiftgrade-api и swiftgrade-cv. То есть если вмержил api, подожди, пока код будет залит на стейдж, и только когда будет готово, приступай к мержу cv. Api и web (или cv и web) можно заливать параллельно. Скорее всего cv тебе вообще не нужно будет заливать, т.к последнее время задач на этом репозитории у нас не было. 
Как понять, что уже залито: попросила Игоря настроить для тебя нотификации. Тебе на почту будут приходить письма от aws, что деплой начался или завершился и на каком сервере. Если придёт в сообщении статус FAILED, пиши Игорю. 
Таким образом, схема для ПР-ов в зависимости от того, на какой сервер надо заливать код:                                                                                                                  ```                                                                                                             dev (в случае swiftgrade-cv репозитория - develop) —> testing —> stage (or prod)
```
Важный момент: при создании ПР-а часто автоматически ставится галочка «Удалить ветку». В случае с ветками выше удалять их нельзя, галочка всегда должна быть не отмечена.
7. Когда шаг 6 выполнен (либо во время того, как код заливается), нужно добавить версионность - теги. Это можешь загулять просто (команда git tag). Ты мог видеть, что последнее время пишу в чате версию для каждого репозитория. Каждый билд версии обновляются. Если в репозитории (например, cv) ничего не поменялось, то версия остаётся такой же, как и в прошлом билде и просто переносится тот же номер. Если код новый, то правила следующие. Например, сейчас для swiftgrade-web у нас стоит версия 0.3.3 . Если в новом коде присутствуют только фиксы багов, это патч, и новая версия будет содержать 4-ую цифру, т.е 0.3.3.1 . Если в новом коде присутствует новый функционал, то меняется 3-я цифра и версия будет 0.3.4 . Когда локально тег создашь, то его можно запушить просто через команду git tag push origin 0.3.4. 
Теги ставятся, когда ты находишься на dev ветке. То есть локально сначала переключаешься на dev ветку. Проверяешь, что она обновлена (git pull origin dev) и только потом создаёшь тег.
8. Переносишь все задачи из колонки Reviewed в Stage env (к этому моменту разработчики должны сами уже перенести свои задачи в колонку Reviewed, но если этого не произошло, проверяешь другие колонки, и если видишь, что задача в билд вошла, но статус не актуален, сам переносишь задачу в нужную колонку).
9.  Когда пришли сообщения от aws, что код залит успешно во всех репах (это примерно через минут 20-30 после того, как ты вмержил код в нужную stage или prod ветку), идёшь на нужный сервер (в нашем случае stage) и проверяешь работоспособность приложения. То есть заходишь на stage.goswiftgrade.com, проходишься по страницам и смотришь, что ничего не падает. В идеале - протестировать каждый фикс из билда поверхностно и убедиться, что работает. Но часто на это нет времени и денег Эша, поэтому бывает достаточно по нескольким пройтись.
10. Написать сообщение в беседу Swiftgrade Dev, что последний код доставлен на сервер. Текст можешь взять тот же, что обычно я пишу: 
```
Всем привет! Build X залит на Staging server. Залитые задачи находятся в статусе Stage env. Проверил общую работоспособность приложения, приложение работает без критических проблем. 
Tags: 
swiftgrade-api: A 
swiftgrade-web: B 
swiftgrade-cv: C
``` 
  Как ставится номер билда:
 Если новый код содержит новый функционал, то номер билда следующий после предыдущего, то есть Build 52. Если новый код содержит только фиксы багов, то это патч и название будет такое: Build 51 Patch 1.
