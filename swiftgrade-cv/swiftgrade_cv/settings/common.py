"""
Django settings for swiftgrade_cv project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

from django.utils.translation import ugettext_lazy as _

from tempfile import gettempdir

import os
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_FOLDER = os.path.dirname(BASE_DIR)
PUBLIC_FOLDER = f'{BASE_FOLDER}/public'.replace('//', '/')
TEX_FOLDER = f'{BASE_FOLDER}/tex'.replace('//', '/')
LOGO_IMAGE_PATH = f'{TEX_FOLDER}/images/logo'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django_extensions',
    'django_filters',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'drf_yasg',
    'dynamic_preferences',
    'jet.dashboard',
    'jet',
    'rangefilter',
    'rest_framework_jwt',
    'rest_framework',
    'swiftgrade_cv',
    'users',
    'coordinates_app',
    'generation_app',
    'recognition_app',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'api.core.middleware.SwaggerAgentMiddleware',
]

ROOT_URLCONF = 'swiftgrade_cv.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ["DB_NAME"],
        'USER': os.environ["DB_USER"],
        'PASSWORD': os.environ["DB_PASSWORD"],
        'HOST': os.environ["DB_HOST"],
    },
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'users.services.auth.authentication_service.JSONWebTokenAuthentication',
    ),
    'EXCEPTION_HANDLER': 'api.core.utils.exception_handler.exception_handler_wrapper',
}

JWT_AUTH = {
    'JWT_SECRET_KEY': os.environ.get('JWT_SECRET_KEY'),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=24)
}
TIMEOUT_IN_MINUTES_TIME = 30
GOALS_LIMITATION = 99
# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

LANGUAGES = [
    ('en', _('English')),
]

LOCALE_PATHS = [
    "%s/locales/" % BASE_DIR,
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-client',
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'static/'

AUTH_USER_MODEL = 'users.User'

# Verification code expiration in hours
VERIFICATION_CODE_EXPIRATION_TIME = 2

SHELL_PLUS = "ipython"

SHELL_PLUS_PRE_IMPORTS = [
    ('users.services', '*'),
    ('datetime', ('datetime', 'timedelta')),
]

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SHOW_EXTENSIONS': False,
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
    'DEFAULT_FIELD_INSPECTORS': [
        'drf_yasg.inspectors.CamelCaseJSONFilter',
        'drf_yasg.inspectors.RecursiveFieldInspector',
        'drf_yasg.inspectors.ReferencingSerializerInspector',
        'drf_yasg.inspectors.ChoiceFieldInspector',
        'drf_yasg.inspectors.FileFieldInspector',
        'drf_yasg.inspectors.DictFieldInspector',
        'drf_yasg.inspectors.HiddenFieldInspector',
        'drf_yasg.inspectors.RelatedFieldInspector',
        'drf_yasg.inspectors.SerializerMethodFieldInspector',
        'drf_yasg.inspectors.SimpleFieldInspector',
        'drf_yasg.inspectors.StringDefaultFieldInspector',
    ],
}

APPEND_SLASH = False

LOGIN_URL = 'rest_framework:login'
LOGOUT_URL = 'rest_framework:logout'

CELERY_BROKER_URL = os.environ.get("REDIS_URL", "redis://localhost:6379/0")
# CELERY_DEFAULT_QUEUE = os.environ.get("CELERY_DEFAULT_QUEUE", "default")
# CELERY_DEFAULT_EXCHANGE = os.environ.get("CELERY_DEFAULT_QUEUE", "default")
# CELERY_DEFAULT_ROUTING_KEY = os.environ.get("CELERY_DEFAULT_QUEUE", "default")
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True

DYNAMIC_PREFERENCES = {

    # a python attribute that will be added to model instances with preferences
    # override this if the default collide with one of your models attributes/fields
    'MANAGER_ATTRIBUTE': 'preferences',

    # The python module in which registered preferences will be searched within each app
    'REGISTRY_MODULE': 'dynamic_preferences_registry',

    # Allow quick editing of preferences directly in admin list view
    # WARNING: enabling this feature can cause data corruption if multiple users
    # use the same list view at the same time, see https://code.djangoproject.com/ticket/11313
    'ADMIN_ENABLE_CHANGELIST_FORM': True,

    'FILE_PREFERENCE_UPLOAD_DIR': '',

    # Customize how you can access preferences from managers. The default is to
    # separate sections and keys with two underscores. This is probably not a settings you'll
    # want to change, but it's here just in case
    'SECTION_KEY_SEPARATOR': '__',

    # Use this to disable caching of preference. This can be useful to debug things
    'ENABLE_CACHE': False,

    # Use this to disable checking preferences names. This can be useful to debug things
    'VALIDATE_NAMES': True,
}

JET_SIDE_MENU_COMPACT = True

ADMIN_DATE_FORMATS = ('%m/%d/%Y', '%Y-%m-%d')
ADMIN_TIMEZONE = 'Etc/GMT+4'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    },
}

HOST_URL = os.environ.get('HOST_URL')
WEBHOOK_HOST_URL = os.environ.get("WEBHOOK_HOST_URL", "")
GENERATION_HOOK = os.environ.get("GENERATION_HOOK", "")
GENERIC_GENERATION_HOOK = os.environ.get("GENERIC_GENERATION_HOOK", "")
RECOGNITION_HOOK = os.environ.get("RECOGNITION_HOOK", "")
GENERIC_RECOGNITION_HOOK = os.environ.get("GENERIC_RECOGNITION_HOOK", "")
FONTS_PATH = os.environ.get("FONTS_PATH", "")
MATHPIX_URL = os.environ.get("MATHPIX_URL", "")
MATHPIX_APP_ID = os.environ.get("MATHPIX_APP_ID", "")
MATHPIX_APP_KEY = os.environ.get("MATHPIX_APP_KEY", "")
MAX_CONCURRENT_REQUESTS = int(os.environ.get('MAX_CONCURRENT_REQUESTS', 20))
LATEX_CONFIDENCE_RATE = os.environ.get("LATEX_CONFIDENCE_RATE", "")
RECOGNITION_MODE = os.environ.get("RECOGNITION_MODE", "single")
AWS_BUCKET_NAME = os.environ['AWS_BUCKET_NAME']
AWS_IMAGES_FOLDER_PATH = os.environ.get('AWS_IMAGES_FOLDER_PATH', 'images')
TEMP_DIR = gettempdir()

PASSWORD_MIN_LENGTH = 8

REST_SESSION_LOGIN = False

LOGGER_BACKUP_COUNT = os.environ.get('LOGGER_BACKUP_COUNT', 10)
LOGGER_INTERVAL = os.environ.get('LOGGER_INTERVAL', 2)
